AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Parameters:
  StageName:
    Type: String
  BucketPrefix:
    Type: String
  CicdBucket:
    Type: String
Resources:


  ImageBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "characters-image-${StageName}"

  BucketFrontend:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      BucketName: !Sub "tp-frontend-${StageName}"

  BucketPolicyReadPublic:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref BucketFrontend
      PolicyDocument:
        Id: PublicReadPolicy
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BucketFrontend
                - /*

  FrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: FrontOAI

  FrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
        - DomainName: tp-frontend-live.s3.eu-west-3.amazonaws.com
          Id: tp-frontend-live
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${FrontOriginAccessIdentity}"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: tp-frontend-live
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: live
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            # Chemin vers la spec OpenAPI
            Location: !Sub "s3://${CicdBucket}/spec/api-spec.yaml"
      Auth:
        Authorizers:
          authorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  FindCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      CodeUri: src/character/get
      Handler: character
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: go1.x
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CharTable
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /character
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref CharTable

  GetAllCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      CodeUri: src/character/all
      Handler: character
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: go1.x
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CharTable
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /character/all
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref CharTable

  FindCharacterByDescFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Chemin du handler de la lambda
      CodeUri: src/character
      Handler: character
      # Runtime utilisé pour l'exécution de la lambda
      Runtime: go1.x
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      # Droits IAM affectés à la l'exécution de la lambda
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              !Ref CharTable
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /character/desc
            Method: GET
      # Variables d'environnement
      Environment:
        Variables:
          TABLE_NAME: !Ref CharTable
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html

  CreateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/character/post
      Handler: character
      Runtime: go1.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CharTable
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /character/create
            Method: POST
      Environment:
        Variables:
          TABLE_NAME: !Ref CharTable

  DeleteCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/character/delete
      Handler: character
      Runtime: go1.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CharTable
        - CloudWatchPutMetricPolicy: { }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DefaultApi
            Path: /character/delete
            Method: DELETE
      Environment:
        Variables:
          TABLE_NAME: !Ref CharTable

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "manganagement-${StageName}-AuthorizerFunction"
      CodeUri: src/
      Handler: hello-world
      Runtime: go1.x
      Policies:
        - CloudWatchPutMetricPolicy: { }

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  CharTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "manganagement-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: uuid
        AttributeType: S
      - AttributeName: name
        AttributeType: S
      - AttributeName: description
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      - AttributeName: description
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: name-description
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: description
            KeyType: RANGE
        Projection:
          ProjectionType: ALL
      GlobalSecondaryIndexes:
      - IndexName: uuid
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        Projection:
          ProjectionType: ALL
      - IndexName: name
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        Projection:
          ProjectionType: ALL