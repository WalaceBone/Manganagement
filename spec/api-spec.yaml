openapi: "3.0.1"
info:
  version: "1"
  title: "Manganagement documentation"


servers:
  - url: "https://{api_id}.execute-api.eu-west-3.amazonaws.com/live"
    variables:
      api_id:
        default: api_id
        description: set api id

paths:
  /manga:
    get:
      summary: "Find Manga by title"
      parameters:
        - in: query
          name: title
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manga"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindMangaFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

    post:
      summary: "Create Manga"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Manga"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Manga"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 201
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateMangaFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      
  /manga/{id}:
    delete:
      summary: "Delete manga"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 204
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMangaFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

  /character:
    get:
      summary: "Find character by name"
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: desc
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindCharacterFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
    post:
      summary: "Create character"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Character"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 201
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCharacterFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

  /character/desc:
    get:
      summary: "Find character by text in description"
      parameters:
        - in: query
          name: desc
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindCharacterFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

  /character/{id}:
    delete:
      summary: "Delete character"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - sigv4: [ ]
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 204
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindCharacterByDescFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

components:
  schemas:
    Manga:
      type: object
      properties:
        id:
          type: string
        author:
          type: string
        title:
          type: string
        description:
          type: string
    Character:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        description: 
          type: string
        image:
          type: string
    CharacterList:
      type: array
      items:
        $ref: '#/components/schemas/Character'
    Empty:
      type: object

securityDefinitions:
  sigv4:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: awsSigv4

  authorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: 'custom'
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AuthorizerFunction}/invocations


x-amazon-apigateway-request-validators:
  validate_request:
    validateRequestBody: true
    validateRequestParameters: true
